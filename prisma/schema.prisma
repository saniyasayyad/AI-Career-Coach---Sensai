generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  clerkUserId   String         @unique
  email         String         @unique
  name          String?
  imageUrl      String?
  industry      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bio           String?
  experience    Int?
  skills        String[]
  assessments   Assessments[]
  coverLetters  CoverLetter[]
  resume        Resume?
  salaryInsight SalaryInsight?
}

model Assessments {
  id             String   @id @default(cuid())
  userId         String
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  content   String
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("completed")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SalaryInsight {
  id              String   @id @default(cuid())
  userId          String   @unique
  industry        String
  experience      Int
  entryLevelMin   Int?
  entryLevelMax   Int?
  midLevelMin     Int?
  midLevelMax     Int?
  seniorLevelMin  Int?
  seniorLevelMax  Int?
  userEstimate    Int?
  marketTrends    String?
  recommendations String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastUpdated     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([industry])
}

model industryInsight {
  id                String        @id @default(cuid())
  industry          String        @unique
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       DemandLevel
  topSkills         String[]
  recommendedSkills String[]
  marketOutlook     MarketOutlook
  keyTrends         String[]
  lastUpdated       DateTime      @default(now())
  nextUpdate        DateTime

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
