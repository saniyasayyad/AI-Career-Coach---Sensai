generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  clerkUserId   String  @unique //clerk user id
  email         String  @unique
  name          String?
  imageUrl      String?
  industry      String?         // industry subindustry
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio             String?
  experience      Int?
  skills          String[]

  assessments     Assessments[]
  resume          Resume?
  coverLetter     coverLetter[]
  salaryInsight   SalaryInsight? // Added salary insight relation
}

model Assessments {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float    // quizScore
  questions      Json[]   // Array {que, ans, userAns, isCorrect}
  category       String   // "Technical", "Behavioral", etc
  improvementTip String?  // AI generated improvementTip
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume{
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model coverLetter{
  id          String    @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  jobDescription  String?
  companyName   String
  jobTitle      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Added SalaryInsight model for AI-generated salary data
model SalaryInsight {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  industry      String
  experience    Int
  
  // Salary ranges (stored as integers for USD amounts)
  entryLevelMin Int?
  entryLevelMax Int?
  midLevelMin   Int?
  midLevelMax   Int?
  seniorLevelMin Int?
  seniorLevelMax Int?
  userEstimate  Int?
  
  // Market insights
  marketTrends     String?
  recommendations  String[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastUpdated   DateTime @default(now())

  @@index([userId])
  @@index([industry])
}

model industryInsight {
  id          String    @id @default(cuid())
  industry    String    @unique
  salaryRanges  Json[]
  growthRate    Float
  demandLevel   DemandLevel
  topSkills     String[]
  recommendedSkills String[]
  marketOutlook MarketOutlook
  keyTrends     String[]
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}